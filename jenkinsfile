pipeline {
    agent { label 'agent1' }
    stages {
        stage('Checkout') {
            steps {
                echo "Getting Project from Git"
                git branch: "main",
                    url: "https://github.com/BenAliFiras/FirasBenAli.git"
            }
        }
        stage('coverage test') {
             steps {
                script {
                    sh 'mvn clean test -P test jacoco:report'
                }
             }
        }
        stage('SonarQube analysis') {
            steps {
                script {
                    sh 'mvn compile sonar:sonar -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.organization=sonarrojectdeploy -Dsonar.projectKey=sonarrojectdeploy_projectsonar -Dsonar.login=2599d376806e2f80e713b0ba3d6c1d29dde2d6e4'
                }
            }
        }
        stage('Build Artifact') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }
        /* stage('deploy Artifact') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        } */
        /* stage('Deploy Artifact to Dev') {
            environment {
                SPRING_PROFILES_ACTIVE = 'dev'
            }
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Deploy Artifact to Test') {
            environment {
                SPRING_PROFILES_ACTIVE = 'test'
            }
            steps {
                sh 'mvn deploy -DskipTests'
            }
        } */
        stage('Deploy Artifact to Prod') {
            environment {
                SPRING_PROFILES_ACTIVE = 'prod'
            }
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    sh 'docker build -t app-container .'
                }
            }
        }
        stage('Run Docker image') {
            steps {
                script {
                    sh 'docker compose up --build -d'
                }
            }
        }
    }
        post {
            always {
                emailext (
                    subject: "Résultat du Pipeline: ${currentBuild.fullDisplayName}",
                    body: """<p>Le pipeline '${env.JOB_NAME}' a été exécuté.</p>
    <p>Status: ${currentBuild.currentResult}</p>
    <p>Voir les détails ici: ${env.BUILD_URL}</p>""",
                    recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                    to: 'firas.benali65@gmail.com'
                )
            }
        }

    }

